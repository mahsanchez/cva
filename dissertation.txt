Introduction 

NVIDIA GPU Hardware 
Von Neumann Architecture CPU Architecture vs GPU Architecture
SIMT vs SIMD Execution Model (Vectorization)
Memory Distribution

CUDA Programming Model
-Intro to Prgoramming model (https://devblogs.nvidia.com/even-easier-introduction-cuda/)
-Block/Grid Partition
-Memory Bandwidtdh : Coalesced Data Access
-Memory Bandwidtdh : Shared Memory Access
-Synchronization
-Warp Divergence
-Latency Hiding (Multi Threading over caching)
-Ocupancy
-Streams

Monte Carlo Simulation numerical method

Financial problems are usually modelled using Stochastic Differential Equations (SDE). Most of the SDE
problems have a high dimensions integration problems and does not have a closed form solution. Hence, 
numerical methods in the area of stochastic simulations based on sampling methods 
basically simulate independent realizations of the stochastic phenomenon under consideration and then to compute an
estimate for the expectation of interest via an appropriate estimator obtained from independent samples.

In other words, one runs N independent computer experiments replicating the random variable Z, and then computes z from the sample. Use of random sampling or a method for computing a expectation is often called the Monte Carlo method. The estimator of z = E[Z] is an average of independent identical distributed copies of Z. Based on the Law of Large Numbers
for a given N < +oo the stocastic simulation converge to z = 1/n sum[Z] and for N large enough hold that 
En-1[Z] - En[Z] < epsilon. The epsilon value determine the converge criteria for the numerical methods and depends 
on the accuracy required in the specific problem context.

Key Issues arising in Monte Carlo Simulation
- Uniform/Gaussian Random generators
- Large number of samplings
- Large floating point summation
- (Speeding up Convergence) using Variance Reduction (slow convergence rate)
- Convergence Criteria and Accuracy
- Hardware Acceleration to improve Long execution time 

Case of Study Accelerating the calculation of IRS CVA with GPU

  Interest Rate Swap

  Pricing an Interest Rate Swap product under Heath-Jarrow-Morton framework using Monte Carlo

  Credit Valuation Adjustment (CVA)

  Serial CPU Implementation

    step 1 - HJM Model Calibration
    step 2 - Evolve Risk Factor in the Future using MC Simulation
    step 3 - Generate the Discount Factors and Forward Rates on each pricing point
    step 4 - Perform IRS Mark to Market across pricing points
    step 5 - Generate an Exposure Profile
    step 6 - Run 2 through 6 N times ( N > 1000)
    step 7 - Calculate the Expected Exposure profile averaging  N-Exposure Curves across all simulation points
    step 8 - Run 2 through 6 N times ( N >> 1000 ) 
    step 9 - Calculate the Expected Exposure profile averaging  N-Exposure Curves across all simulation points
    step 10 - Perform a difference across simulation point for the EE calculated obtained in step 7 and step 9
    step 11 - Each for each simulation point the difference is less than a threshold then stop simulation
    step 12 - Repeat step 8 through 9 till the simulation converge
  
  GPU implementation
  
  • Use CURAND to generate the Gaussian Variates inside the GPU
  • Simulations in loop are independent: loop can be parallelised 
  • Strategy: carve up the N iterations between our P CPU threads, so that each thread computes N/P iterations
  • Thread safety: have to take care when collecting running sums from P threads at the end (synchronisation?)
  • Run partial reduction in the GPU
  • Each thread copy one element of the vector back to the memory cpu

  Benchmark GPU Accelerated solutions against CPU

Conclusions

References

[1] Pykhtin, Michael, and Steven Zhu, A Guide to Modeling Counterparty Credit Risk, GARP, July/August 2007, issue 37, pp. 16-22.

[2] Mathworks. Counterparty Credit Risk and CVA. https://de.mathworks.com/help/fininst/examples/counterparty-credit-risk-and-cva.html

[3] Glasserman, Paul. Importance Sampling in the Heath-Jarrow-Morton framework. https://www0.gsb.columbia.edu/faculty/pglasserman/Other/ghs_jderiv.pdf

[4] Lerche, Ian and Mudford, Brett S. How many Monte Carlo simulations do I need to do?https://journals.sagepub.com/doi/pdf/10.1260/014459805776986876

[5] Jaeckel, Peter. Monte Carlo Methods in Finance

[6] Willmot,Paul. Introduces Quantitative Finance. 

[7] Higham, Nicholas J. (2002). Accuracy and Stability of Numerical Algorithms. 2nd Edition. SIAM. pp. 110–123;

[8] Savigne, Antoine. Modern Computational Finance, AAD and Parallel Simulations. 

[9] Joshi, Mark. C++ Design Pattern and Derivatives Pricing. 2nd Edition. 

[10] Harris, Mark. An even easy introduction to CUDA. https://devblogs.nvidia.com/even-easier-introduction-cuda/

[11] Wen Wei and Kirk. Programming Massively Parallel Processors. 3rd edition.

[12] Kindratenko, Vlodymyr. Numerical Computations with GPUs. chapter 12, 13, 14

[13] Mudigere, Dheevatsa. Data access optimized applications on the GPU using NVIDIA CUDA. https://www5.in.tum.de/pub/mudigere09.pdf

[14] NVIDIA Curand User Guide. https://docs.nvidia.com/cuda/curand/index.html

[15] NVIDIA CUDA C Programming Guide. https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html

[15] NVIDIA CUDA Best Practices Guide. https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html

